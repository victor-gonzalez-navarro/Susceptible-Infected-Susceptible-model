{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Menlo-Italic;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red83\green101\blue121;\red255\green255\blue255;\red0\green0\blue0;
\red100\green56\blue32;\red196\green26\blue22;\red155\green35\blue147;\red92\green38\blue153;\red28\green0\blue207;
\red57\green0\blue160;\red50\green109\blue116;\red36\green82\blue86;\red63\green80\blue98;}
{\*\expandedcolortbl;;\csgenericrgb\c32401\c39745\c47507;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c39147\c22031\c12446;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c35922\c14825\c60191;\csgenericrgb\c11000\c0\c81000;
\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c13924\c32052\c33684;\csgenericrgb\c24790\c31335\c38289;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\i\fs24 \cf2 \cb3 //
\f1\i0 \cf4 \

\f0\i \cf2 //  main.cpp
\f1\i0 \cf4 \

\f0\i \cf2 //  sisc
\f1\i0 \cf4 \

\f0\i \cf2 //
\f1\i0 \cf4 \

\f0\i \cf2 //  Created by Victor Gonzalez on 18/4/19.
\f1\i0 \cf4 \

\f0\i \cf2 //  Copyright \'a9 2019 Victor Gonzalez. All rights reserved.
\f1\i0 \cf4 \

\f0\i \cf2 //
\f1\i0 \cf4 \
\
\cf5 #include\cf6 <iostream>\cf4 \
\cf5 #include\cf6 <fstream>\cf4 \
\cf5 #include \cf6 <iterator>\cf4 \
\cf5 #include \cf6 <iostream>\cf4 \
\cf5 #include \cf6 <string>\cf4 \
\cf5 #include \cf6 <algorithm>\cf4 \
\cf5 #include \cf6 <vector>\cf4 \
\cf5 #include \cf6 <iomanip>\cf4 \
\cf5 #include \cf6 <stdlib.h>\cf4 \
\cf5 #include \cf6 <cmath>\cf4 \

\f2\b \cf7 using
\f1\b0 \cf4  
\f2\b \cf7 namespace
\f1\b0 \cf4  \cf8 std\cf4 ;\
\

\f2\b \cf7 const
\f1\b0 \cf4  
\f2\b \cf7 int
\f1\b0 \cf4  array_Nnodes[] = \{\cf9 9\cf4 , \cf9 9\cf4 \}; 
\f0\i \cf2 // ----------------------------------------- cambiar esto
\f1\i0 \cf4 \

\f2\b \cf7 const
\f1\b0 \cf4  \cf8 string\cf4  arrayRead_files[] = \{\cf6 "./Files/exampleRead1.txt"\cf4 , \cf6 "./Files/exampleRead2.txt"\cf4 \};\

\f2\b \cf7 const
\f1\b0 \cf4  \cf8 string\cf4  arrayWrite_files[] = \{\cf6 "./Files/exampleWrite1mu1.txt"\cf4 , \cf6 "./Files/exampleWrite1mu2.txt"\cf4 , \cf6 "./Files/exampleWrite1mu3.txt"\cf4 , \cf6 "./Files/exampleWrite2mu1.txt"\cf4 , \cf6 "./Files/exampleWrite2mu2.txt"\cf4 , \cf6 "./Files/exampleWrite2mu3.txt"\cf4 \};\
\
\cf8 size_t\cf4  split(
\f2\b \cf7 const
\f1\b0 \cf4  \cf8 std\cf4 ::\cf8 string\cf4  &txt, \cf8 std\cf4 ::\cf8 vector\cf4 <\cf8 std\cf4 ::\cf8 string\cf4 > &strs, 
\f2\b \cf7 char
\f1\b0 \cf4  ch)\
\{\
    \cf8 size_t\cf4  pos = txt.\cf10 find\cf4 ( ch );\
    \cf8 size_t\cf4  initialPos = \cf9 0\cf4 ;\
    strs.\cf10 clear\cf4 ();\
    \
    
\f0\i \cf2 // Decompose statement
\f1\i0 \cf4 \
    
\f2\b \cf7 while
\f1\b0 \cf4 ( pos != \cf8 std\cf4 ::\cf8 string\cf4 ::\cf8 npos\cf4  ) \{\
        strs.\cf10 push_back\cf4 ( txt.\cf10 substr\cf4 ( initialPos, pos - initialPos ) );\
        initialPos = pos + \cf9 1\cf4 ;\
        \
        pos = txt.\cf10 find\cf4 ( ch, initialPos );\
    \}\
    \
    
\f0\i \cf2 // Add the last one
\f1\i0 \cf4 \
    strs.\cf10 push_back\cf4 ( txt.\cf10 substr\cf4 ( initialPos, \cf8 std\cf4 ::\cf10 min\cf4 ( pos, txt.\cf10 size\cf4 () ) - initialPos + \cf9 1\cf4  ) );\
    \
    
\f2\b \cf7 return
\f1\b0 \cf4  strs.\cf10 size\cf4 ();\
\}\
\

\f2\b \cf7 int
\f1\b0 \cf4  areSame(
\f2\b \cf7 float
\f1\b0 \cf4  a, 
\f2\b \cf7 float
\f1\b0 \cf4  b)\
\{\
    
\f2\b \cf7 float
\f1\b0 \cf4  epsilon = \cf9 0.0002\cf4 ;\
    
\f2\b \cf7 int
\f1\b0 \cf4  bolean_return = \cf9 0\cf4 ;\
    
\f2\b \cf7 if
\f1\b0 \cf4  (\cf10 fabs\cf4 (a-b) < epsilon)\{\
        bolean_return = \cf9 1\cf4 ;\
    \}\
    
\f2\b \cf7 return
\f1\b0 \cf4  bolean_return;\
\}\
\

\f2\b \cf7 double
\f1\b0 \cf4  doubleRand() \{\
    
\f2\b \cf7 return
\f1\b0 \cf4  
\f2\b \cf7 double
\f1\b0 \cf4 (\cf10 rand\cf4 ()) / (
\f2\b \cf7 double
\f1\b0 \cf4 (\cf5 RAND_MAX\cf4 ) + \cf9 1.0\cf4 );\
\}\

\f2\b \cf7 float
\f1\b0 \cf4  floatRand() \{\
    
\f2\b \cf7 return
\f1\b0 \cf4  
\f2\b \cf7 float
\f1\b0 \cf4 (\cf10 rand\cf4 ()) / (
\f2\b \cf7 float
\f1\b0 \cf4 (\cf5 RAND_MAX\cf4 ) + \cf9 1.0\cf4 );\
\}\
\
\
\

\f2\b \cf7 int
\f1\b0 \cf4  main() \{\
    
\f0\i \cf2 // HYPERPARAMETERS
\f1\i0 \cf4 \
    
\f0\i \cf2 /*
\f1\i0 \cf4 \

\f0\i \cf2      int resolution = 51
\f1\i0 \cf4 \

\f0\i \cf2      int number_experiments =  (sizeof(array_Nnodes)/sizeof(*array_Nnodes));
\f1\i0 \cf4 \

\f0\i \cf2      float possible_mu[] = \{0.1, 0.5, 0.9\};
\f1\i0 \cf4 \

\f0\i \cf2      int number_possiblemu = (sizeof(possible_mu)/sizeof(*possible_mu));
\f1\i0 \cf4 \

\f0\i \cf2      float possible_betas[resolution];
\f1\i0 \cf4 \

\f0\i \cf2      int number_possiblebetas = (sizeof(possible_betas)/sizeof(*possible_betas));
\f1\i0 \cf4 \

\f0\i \cf2      float value = 0;
\f1\i0 \cf4 \

\f0\i \cf2      for (int i = 0; i < resolution; i++)\{
\f1\i0 \cf4 \

\f0\i \cf2      possible_betas[i] = value;
\f1\i0 \cf4 \

\f0\i \cf2      value = value + 0.02;
\f1\i0 \cf4 \

\f0\i \cf2      \}
\f1\i0 \cf4 \

\f0\i \cf2      float ro_init = 0.2;
\f1\i0 \cf4 \

\f0\i \cf2      int Tmax = 1000;
\f1\i0 \cf4 \

\f0\i \cf2      int Ttrans = Tmax - 100;
\f1\i0 \cf4 \

\f0\i \cf2      int Nrep = 50;
\f1\i0 \cf4 \

\f0\i \cf2      float betas_drawing[6] = \{0.18, 0.19, 0.20, 0.25, 0.40, 0.90\};
\f1\i0 \cf4 \

\f0\i \cf2      */
\f1\i0 \cf4 \
    
\f0\i \cf2 // EASY HYPERPARAMETERS
\f1\i0 \cf4 \
    
\f2\b \cf7 int
\f1\b0 \cf4  resolution = \cf9 3\cf4 ;\
    
\f2\b \cf7 int
\f1\b0 \cf4  number_experiments =  (
\f2\b \cf7 sizeof
\f1\b0 \cf4 (\cf11 array_Nnodes\cf4 )/
\f2\b \cf7 sizeof
\f1\b0 \cf4 (*\cf11 array_Nnodes\cf4 ));\
    
\f2\b \cf7 float
\f1\b0 \cf4  possible_mu[] = \{\cf9 0.1\cf4 , \cf9 0.5\cf4 , \cf9 0.9\cf4 \};\
    
\f2\b \cf7 int
\f1\b0 \cf4  number_possiblemu = (
\f2\b \cf7 sizeof
\f1\b0 \cf4 (possible_mu)/
\f2\b \cf7 sizeof
\f1\b0 \cf4 (*possible_mu));\
    
\f2\b \cf7 float
\f1\b0 \cf4  possible_betas[] = \{\cf9 0.98\cf4 , \cf9 0.19\cf4 , \cf9 0.90\cf4 \};\
    
\f2\b \cf7 int
\f1\b0 \cf4  number_possiblebetas = (
\f2\b \cf7 sizeof
\f1\b0 \cf4 (possible_betas)/
\f2\b \cf7 sizeof
\f1\b0 \cf4 (*possible_betas));\
    
\f2\b \cf7 float
\f1\b0 \cf4  ro_init = \cf9 0.2\cf4 ;\
    
\f2\b \cf7 int
\f1\b0 \cf4  Tmax = \cf9 50\cf4 ;\
    
\f2\b \cf7 int
\f1\b0 \cf4  Ttrans = Tmax - \cf9 10\cf4 ;\
    
\f2\b \cf7 int
\f1\b0 \cf4  Nrep = \cf9 2\cf4 ;\
    
\f2\b \cf7 float
\f1\b0 \cf4  betas_drawing[\cf9 6\cf4 ] = \{\cf9 0.18\cf4 , \cf9 0.19\cf4 , \cf9 0.20\cf4 , \cf9 0.25\cf4 , \cf9 0.40\cf4 , \cf9 0.90\cf4 \};\
    \
    \
    
\f0\i \cf2 // STARTING THE MAIN CODE
\f1\i0 \cf4 \
    
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  i = \cf9 0\cf4 ; i < number_experiments; i++)\{\
        \cf8 cout\cf4  << \cf6 "\\n############################################################"\cf4 ;\
        \cf8 cout\cf4  << \cf6 "\\nComputing file "\cf4  << \cf11 arrayRead_files\cf4 [i];\
        
\f0\i \cf2 // Read file so as to initialize adjacency
\f1\i0 \cf4 \
        
\f2\b \cf7 int
\f1\b0 \cf4  Nnodes = \cf11 array_Nnodes\cf4 [i];\
        
\f2\b \cf7 int
\f1\b0 \cf4  row;\
        
\f2\b \cf7 int
\f1\b0 \cf4  column;\
        
\f2\b \cf7 float
\f1\b0 \cf4  adjacency[Nnodes][Nnodes];\
        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  i = \cf9 0\cf4 ; i < Nnodes; i++)\{\
            
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  j = \cf9 0\cf4 ; j < Nnodes; j++)\{\
                adjacency[i][j] = \cf9 0.0\cf4  ;\
            \}\
        \}\
        \cf8 ifstream\cf4  file(\cf11 arrayRead_files\cf4 [i]);\
        
\f2\b \cf7 if
\f1\b0 \cf4  (file.\cf10 is_open\cf4 ()) \{\
            \cf8 string\cf4  line;\
            
\f2\b \cf7 while
\f1\b0 \cf4  (\cf10 getline\cf4 (file, line)) \{\
                \cf8 vector\cf4 <\cf8 std\cf4 ::\cf8 string\cf4 > splitedstring;\
                \cf12 split\cf4 ( line, splitedstring, \cf9 ' '\cf4  );\
                row = \cf10 stof\cf4 (splitedstring[\cf9 0\cf4 ]);\
                column = \cf10 stof\cf4 (splitedstring[\cf9 1\cf4 ]);\
                adjacency[row][column]=\cf9 1\cf4 ;\
                adjacency[column][row]=\cf9 1\cf4 ;\
            \}\
            file.\cf10 close\cf4 ();\
        \}\
        \cf8 cout\cf4  << \cf6 "\\nNumber of nodes is "\cf4  << \cf11 array_Nnodes\cf4 [i];\
        \
        
\f2\b \cf7 int
\f1\b0 \cf4  init_array[Nnodes];\
        
\f2\b \cf7 int
\f1\b0 \cf4  i_file = \cf9 0\cf4 ;\
        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  k = \cf9 0\cf4 ; k < number_possiblemu; k++)\{\
            
\f2\b \cf7 float
\f1\b0 \cf4  ro_over_beta[resolution];\
            
\f2\b \cf7 float
\f1\b0 \cf4  ro_over_time[\cf9 6\cf4 ][Tmax];\
            \
            
\f2\b \cf7 int
\f1\b0 \cf4  itt_beta = \cf9 0\cf4 ;\
            
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  k2 = \cf9 0\cf4 ; k2 < number_possiblebetas; k2++)\{\
                
\f2\b \cf7 float
\f1\b0 \cf4  p_Nrep_time[Nrep][Tmax];\
                
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  tries = \cf9 0\cf4 ; tries < Nrep; tries ++)\{\
                    
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  k3 = \cf9 0\cf4 ; k3 < Nnodes; k3++)\{\
                        init_array[k3] = k3;\
                    \}\
                    \
                    \cf10 random_shuffle\cf4 (&init_array[\cf9 0\cf4 ],&init_array[Nnodes]);\
                    \
                    
\f0\i \cf2 // Start with some infected nodes according to ro_initi*Nnodes
\f1\i0 \cf4 \
                    
\f2\b \cf7 int
\f1\b0 \cf4  infected[Nnodes];\
            \
                    \
                    
\f2\b \cf7 int
\f1\b0 \cf4  number_infected = 
\f2\b \cf7 int
\f1\b0 \cf4 (\cf10 round\cf4 (Nnodes*ro_init));\
                    \
                    
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  k3 = \cf9 0\cf4 ; k3 < number_infected; k3++)\{\
                        infected[k3] = init_array[k3];\
                    \}\
                    \
                    
\f0\i \cf2 // Determine the suseptible nodes (those that are not infected)
\f1\i0 \cf4 \
                    
\f2\b \cf7 int
\f1\b0 \cf4  suscepti[Nnodes];\
                    
\f2\b \cf7 int
\f1\b0 \cf4  number_suscepti = \cf9 0\cf4 ;\
                    
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  k3 = \cf9 0\cf4 ; k3 < Nnodes; k3++)\{\
                        
\f2\b \cf7 int
\f1\b0 \cf4  foound = \cf9 0\cf4 ;\
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  hh = \cf9 0\cf4 ; hh < number_infected; hh++) \{\
                            
\f2\b \cf7 if
\f1\b0 \cf4  (\cf12 areSame\cf4 (infected[hh], k3)) \{\
                                foound = \cf9 1\cf4 ;\
                            \}\
                        \}\
                        
\f2\b \cf7 if
\f1\b0 \cf4  (foound == \cf9 0\cf4 ) \{\
                            suscepti[number_suscepti] = k3;\
                            number_suscepti = number_suscepti + \cf9 1\cf4 ;\
                        \}\
                    \}\
                    \cf13 /////////////////////////////////////////////////\cf4 \
                    \cf8 cout\cf4  << \cf6 "\\nInfected nodes: "\cf4 ;\
                    
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  m = \cf9 0\cf4 ; m < number_infected; m++) \{\
                        \cf8 cout\cf4  << infected[m] << \cf6 " - "\cf4 ;;\
                    \}\
                    \cf8 cout\cf4  << \cf6 "\\nSusceptible nodes: "\cf4 ;\
                    
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  m = \cf9 0\cf4 ; m < number_suscepti; m++) \{\
                        \cf8 cout\cf4  << suscepti[m] << \cf6 " - "\cf4 ;;\
                    \}\
                    \cf13 /////////////////////////////////////////////////\cf4 \
                    
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  tsetp = \cf9 0\cf4 ; tsetp < Tmax; tsetp++)\{\
                        p_Nrep_time[tries][tsetp] = number_infected/
\f2\b \cf7 float
\f1\b0 \cf4 (Nnodes);\
                        \
                        \cf13 ////////////////////////////////////////////////\cf4 \
                        \cf8 cout\cf4  << \cf6 "\\n**************************************************"\cf4 ;\
                        \cf8 cout\cf4  << \cf6 "\\nRo for specific try "\cf4  << tries << \cf6 " and tseps "\cf4  << tsetp << \cf6 ": "\cf4 ;\
                        \cf8 cout\cf4  << p_Nrep_time[tries][tsetp];\
                        \cf13 ///////////////////////////////////////////////\cf4 \
                        \
                        
\f0\i \cf2 // cout << p_Nrep_time[tries][tsetp] <<"\\n";
\f1\i0 \cf4 \
                        \
                        
\f2\b \cf7 int
\f1\b0 \cf4  recovered[Nnodes];\
                        
\f2\b \cf7 int
\f1\b0 \cf4  nowinfect[Nnodes];\
                        \
                        \
                        
\f0\i \cf2 // 1. For each infected node at time step t, we recover it with probability mu:
\f1\i0 \cf4 \
                        
\f2\b \cf7 int
\f1\b0 \cf4  ccountRecovered = \cf9 0\cf4 ; 
\f0\i \cf2 //********************************************************
\f1\i0 \cf4 \
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  it1 = \cf9 0\cf4 ; it1 < number_infected; it1++)\{\
                            
\f2\b \cf7 if
\f1\b0 \cf4  (\cf12 doubleRand\cf4 () < possible_mu[k])\{\
                                recovered[ccountRecovered] = infected[it1];\
                                ccountRecovered = ccountRecovered + \cf9 1\cf4 ;\
                            \}\
                        \}\
                        \
                        \cf13 /////////////////////////////////////////////////\cf4 \
                        \cf8 cout\cf4  << \cf6 "\\nNOW RECOVERED: "\cf4 ;\
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  m = \cf9 0\cf4 ; m < ccountRecovered; m++) \{\
                            \cf8 cout\cf4  << recovered[m] << \cf6 " - "\cf4 ;;\
                        \}\
                        \cf13 /////////////////////////////////////////////////\cf4 \
                        \
                        
\f0\i \cf2 // 2. For each susceptible node at time step t, we traverse all of its neighbours.
\f1\i0 \cf4 \
                        
\f0\i \cf2 // For each infected neigbour (at time step t), the reference node becomes infected with probability beta
\f1\i0 \cf4 \
                        
\f2\b \cf7 int
\f1\b0 \cf4  ccountNowInfect = \cf9 0\cf4 ; 
\f0\i \cf2 //*******************************************************
\f1\i0 \cf4 \
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  it1 = \cf9 0\cf4 ; it1 < number_suscepti; it1++)\{\
                            \
                            
\f0\i \cf2 // Find neighbours of the node that are infected
\f1\i0 \cf4 \
                            
\f2\b \cf7 int
\f1\b0 \cf4  past_infected_neigbours[Nnodes];\
                            
\f2\b \cf7 int
\f1\b0 \cf4  number_neighbours_infected = \cf9 0\cf4 ;\
                            \cf13 /////////////////////////////////////////////////\cf4 \
                            \cf8 cout\cf4  << \cf6 "\\nNeighbour from susceptible node "\cf4  << suscepti[it1] << \cf6 " [infected]: "\cf4 ;\
                            \cf13 /////////////////////////////////////////////////\cf4 \
                            
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  nn1 = \cf9 0\cf4 ; nn1 < Nnodes; nn1++)\{\
                                
\f2\b \cf7 double
\f1\b0 \cf4  auxiliary_value = 
\f2\b \cf7 double
\f1\b0 \cf4 (adjacency[suscepti[it1]][nn1]);\
                                
\f0\i \cf2 // Find neighbour
\f1\i0 \cf4 \
                                
\f2\b \cf7 if
\f1\b0 \cf4  (\cf12 areSame\cf4 (auxiliary_value,\cf9 1.0\cf4 ))\{\
                                    \cf8 cout\cf4  << nn1 << \cf6 " "\cf4 ;\
                                    
\f0\i \cf2 // Find infected neighbour
\f1\i0 \cf4 \
                                    
\f2\b \cf7 int
\f1\b0 \cf4  finding = \cf9 0\cf4 ;\
                                    
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  nnnn = \cf9 0\cf4 ; nnnn < number_infected; nnnn++) \{\
                                        
\f2\b \cf7 if
\f1\b0 \cf4  (\cf12 areSame\cf4 (infected[nnnn], nn1)) \{\
                                            finding = \cf9 1\cf4 ;\
                                        \}\
                                    \}\
                                    
\f2\b \cf7 if
\f1\b0 \cf4  (finding == \cf9 1\cf4 ) \{\
                                        past_infected_neigbours[number_neighbours_infected] = nn1;\
                                        number_neighbours_infected = number_neighbours_infected + \cf9 1\cf4 ;\
                                        \cf13 /////////////////////////////////////////////////////////\cf4 \
                                        \cf8 cout\cf4  << \cf6 "["\cf4  << nn1 << \cf6 "] "\cf4 ;\
                                        \cf13 /////////////////////////////////////////////////////////\cf4 \
                                    \}\
                                \}\
                            \}\
                            \
                            
\f2\b \cf7 int
\f1\b0 \cf4  infected_neigbours[number_neighbours_infected];\
                            
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  nn1 = \cf9 0\cf4 ; nn1 < number_neighbours_infected; nn1++)\{\
                                infected_neigbours[nn1] = past_infected_neigbours[nn1];\
                            \}\
                            \
                            
\f2\b \cf7 int
\f1\b0 \cf4  enter = \cf9 1\cf4 ;\
                            
\f2\b \cf7 int
\f1\b0 \cf4  counter = \cf9 0\cf4 ;\
                            
\f2\b \cf7 while
\f1\b0 \cf4  (enter == \cf9 1\cf4  && counter < number_neighbours_infected) \{\
                                
\f2\b \cf7 if
\f1\b0 \cf4  (\cf12 floatRand\cf4 () < possible_betas[k2]) \{\
                                    nowinfect[ccountNowInfect] = suscepti[it1];\
                                    ccountNowInfect = ccountNowInfect + \cf9 1\cf4 ;\
                                    enter = \cf9 0\cf4 ;\
                                \}\
                                counter = counter + \cf9 1\cf4 ;\
                            \}\
                        \}\
                        \
                        \cf13 /////////////////////////////////////////////////\cf4 \
                        \cf8 cout\cf4  << \cf6 "\\nNOW INFECTED: "\cf4 ;\
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  m = \cf9 0\cf4 ; m < ccountNowInfect; m++) \{\
                            \cf8 cout\cf4  << nowinfect[m] << \cf6 " - "\cf4 ;;\
                        \}\
                        \cf13 /////////////////////////////////////////////////\cf4 \
                        \
                        
\f0\i \cf2 // 3. Actualize infected and recovered
\f1\i0 \cf4 \
                        
\f0\i \cf2 // Delete revovered nodes from infected and add to infected the nowinfect nodes
\f1\i0 \cf4 \
                        
\f2\b \cf7 int
\f1\b0 \cf4  next_infected[number_infected + ccountNowInfect - ccountRecovered];\
                        
\f2\b \cf7 int
\f1\b0 \cf4  countfinish = \cf9 0\cf4 ;\
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  jj=\cf9 0\cf4 ; jj < number_infected; jj++)\{\
                            
\f2\b \cf7 int
\f1\b0 \cf4  found = \cf9 0\cf4 ;\
                            
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  cc=\cf9 0\cf4 ; cc < ccountRecovered; cc++)\{\
                                
\f2\b \cf7 if
\f1\b0 \cf4  (\cf12 areSame\cf4 (infected[jj], recovered[cc]))\{\
                                    found = \cf9 1\cf4 ;\
                                \}\
                            \}\
                            
\f2\b \cf7 if
\f1\b0 \cf4  (found == \cf9 0\cf4 ) \{\
                                next_infected[countfinish] = infected[jj];\
                                countfinish = countfinish + \cf9 1\cf4 ;\
                            \}\
                        \}\
                        number_infected = number_infected + ccountNowInfect - ccountRecovered; 
\f0\i \cf2 // Actualize
\f1\i0 \cf4 \
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  jj2 = \cf9 0\cf4 ; jj2 < ccountNowInfect; jj2++)\{\
                            next_infected[countfinish + jj2] = nowinfect[jj2];\
                        \}\
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  jj4 = \cf9 0\cf4 ; jj4 < number_infected; jj4++)\{\
                            infected[jj4] = next_infected[jj4];\
                        \}\
                        \
                        
\f0\i \cf2 // Compute suscepti by being the ones that do not belong to infected
\f1\i0 \cf4 \
                        number_suscepti = number_suscepti - ccountNowInfect + ccountRecovered; 
\f0\i \cf2 // Actualize
\f1\i0 \cf4 \
                        
\f2\b \cf7 int
\f1\b0 \cf4  next_suscepti[number_suscepti];\
                        
\f2\b \cf7 int
\f1\b0 \cf4  ponter_next_suscepti = \cf9 0\cf4 ;\
                        
\f2\b \cf7 int
\f1\b0 \cf4  *end5 = next_infected + 
\f2\b \cf7 sizeof
\f1\b0 \cf4 (next_infected) / 
\f2\b \cf7 sizeof
\f1\b0 \cf4 (
\f2\b \cf7 int
\f1\b0 \cf4 );\
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  jj3 = \cf9 0\cf4 ; jj3 < Nnodes; jj3++)\{\
                            
\f2\b \cf7 int
\f1\b0 \cf4  *result = \cf10 find\cf4 (next_infected, end5, jj3);\
                            
\f2\b \cf7 if
\f1\b0 \cf4  (result == end5) \{\
                                next_suscepti[ponter_next_suscepti] = jj3;\
                                ponter_next_suscepti = ponter_next_suscepti + \cf9 1\cf4 ;\
                            \}\
                        \}\
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  jj4 = \cf9 0\cf4 ; jj4 < number_suscepti; jj4++)\{\
                            suscepti[jj4] = next_suscepti[jj4];\
                        \}\
                        \
                        \cf13 /////////////////////////////////////////////////////////\cf4 \
                        \cf8 cout\cf4  << \cf6 "\\nInfected: "\cf4 ;\
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  jj4 = \cf9 0\cf4 ; jj4 < number_infected; jj4++)\{\
                            \cf8 cout\cf4  << infected[jj4] << \cf6 " - "\cf4 ;\
                        \}\
                        \cf8 cout\cf4  << \cf6 "\\nSusceptible: "\cf4 ;\
                        
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  jj4 = \cf9 0\cf4 ; jj4 < number_suscepti; jj4++)\{\
                            \cf8 cout\cf4  << suscepti[jj4] << \cf6 " - "\cf4 ;\
                        \}\
                        \cf13 ////////////////////////////////////////////////////////\cf4 \
                    \}\
                \}\
                
\f0\i \cf2 // Save ro over time for multiple betas
\f1\i0 \cf4 \
                
\f2\b \cf7 int
\f1\b0 \cf4  equal = \cf9 0\cf4 ;\
                
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  kik = \cf9 0\cf4 ; kik < \cf9 6\cf4 ; kik ++)\{\
                    
\f2\b \cf7 if
\f1\b0 \cf4  (\cf12 areSame\cf4 (betas_drawing[kik], possible_betas[k2]))\{\
                        equal = \cf9 1\cf4 ;\
                        itt_beta = itt_beta + \cf9 1\cf4 ;\
                    \}\
                \}\
                
\f2\b \cf7 if
\f1\b0 \cf4  (equal == \cf9 1\cf4 ) \{\
                    
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  col = \cf9 0\cf4 ; col < Tmax ; col++) \{\
                        ro_over_time[itt_beta][col] = p_Nrep_time[\cf9 0\cf4 ][col];\
                    \}\
                \}\
                
\f0\i \cf2 // Save ro_over_beta (mean ro for each beta). Ro_over_beta is a vector of size 1xnumber_possiblebetas
\f1\i0 \cf4 \
                
\f2\b \cf7 float
\f1\b0 \cf4  sum_min = \cf9 0.0\cf4 ;\
                
\f2\b \cf7 float
\f1\b0 \cf4  num_sum_min = \cf9 0.0\cf4 ;\
                
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  it1_fin = \cf9 0\cf4 ; it1_fin < Nrep; it1_fin++) \{\
                    
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  it2_fin = Ttrans; it2_fin < Tmax; it2_fin++) \{\
                        sum_min = sum_min + p_Nrep_time[it1_fin][it2_fin];\
                        num_sum_min = num_sum_min + \cf9 1\cf4 ;\
                    \}\
                \}\
                sum_min = sum_min/num_sum_min;\
                ro_over_beta[k2] = sum_min;\
            \}\
            
\f0\i \cf2 // Write txt file results of an array
\f1\i0 \cf4 \
            \cf8 ofstream\cf4  myfile;\
            myfile.\cf10 open\cf4  (\cf11 arrayWrite_files\cf4 [i_file]);\
            myfile << \cf6 "Ro_over_beta for mu = "\cf4 ;\
            myfile << possible_mu[k];\
            myfile << \cf6 "\\n"\cf4 ;\
            
\f2\b \cf7 for
\f1\b0 \cf4  (
\f2\b \cf7 int
\f1\b0 \cf4  iii = \cf9 0\cf4 ; iii < number_possiblebetas; iii++)\{\
                myfile<<\cf10 fixed\cf4 <<\cf10 setprecision\cf4 (\cf9 2\cf4 )<<ro_over_beta[iii];\
                myfile << \cf6 "*"\cf4 ;\
            \}\
            myfile.\cf10 close\cf4 ();\
            i_file = i_file + \cf9 1\cf4 ;\
        \}\
        \
        \
    \}\
    \cf8 cout\cf4  << \cf6 "\\n\\n"\cf4 ;\
\}}